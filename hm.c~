#include <malloc.h>
#include <stdio.h>
#include <hm.h>
#include <math.h>



struct number *init_number(void) {
  struct number *num=malloc(sizeof(struct number));
  num->next=num;
  num->prev=num;
  num->digital=0;
  return num;
}

void destroy_number(struct number *num) {
  struct number *current=num->next;

  while (current!=num) {
    current=current->next;
    free(current->prev);
  }
  free(num);
}



struct number *clean_number(struct number * x) {
  struct number *p=x;
  if ((x->next)->digital!=0) return x;
  if ((x->next)->next==x) return x;  /* don't remove 0  if it's the last one */
  p=x->next;
  x->next=p->next;
  (x->next)->prev=x;
  free(p);
  return clean_number(x);
}


struct number *set_sign(struct number *x, int sign) {
  x->digital=sign;
  return x;
}


int get_sign(struct number *x) {
  if ((x->digital) < 0) return -1;
  return 1;
}

struct number *append_tail (struct number *num, int x) {
  struct number * newnumber = malloc(sizeof(struct number));
  newnumber->prev=newnumber;
  newnumber->next=newnumber;
  newnumber->digital=x%10;

  newnumber->prev=num->prev;
  (newnumber->prev)->next=newnumber;
  num->prev=newnumber;
  newnumber->next=num;

  return num;
}

struct number *append_head (struct number *num, int x) {
  struct number *newnumber=append_tail(num->next,x);
  return num;
}


int compare_length(struct number *x, struct number *y) {
  struct number *cx, *cy;
  cx=x,cy=y;
  while (1) {
    cx=cx->next;
    cy=cy->next;

    if (cx==x) {
      if (cy==y) {
	return DIGITAL_LEN_EQ;
      }
      return DIGITAL_LEN_LT;
    } 
    if (cy==y) return DIGITAL_LEN_GT;
  }
}

int compare_abs(struct number *x, struct number *y) {
  int res;
  res=compare_length(x,y);
  if (res!=0) return res;
  
  struct number *cx=x, *cy=y;
  while (1) {

    if (cx==x)
      break;

    cx=cx->next, cy=cy->next;
    if ((cx->digital) < (cy->digital)) {
	return -1;
    }

    if ((cx->digital) > (cy->digital)) {
	return 1;
    } 
  }
  return 0;
}

struct number *do_add (struct number * x, struct number *y) {
  int factx,facty,factr;
  factx=get_sign(x);
  facty=get_sign(y);
  

  
  int dx,dy,dz,x_out,y_out, overflow_v,temp,sign;
  struct number *result=init_number();

  sign=compare_abs(x,y);
  set_sign(result,factx);

  if (sign == DIGITAL_LT) {
    set_sign(result,facty);
  }
  factr=get_sign(result);
  
  
  
  struct number *cx=x->prev,*cy=y->prev;
  overflow_v=0;
  while (1) {
    if (cx!=x) {
      dx=cx->digital;
      cx=cx->prev;
    } else {
      dx=0;
    }
    if (cy!=y) {
      dy=cy->digital;
      cy=cy->prev;
    } else {
      dy=0;
    }

    temp=dx*factx*factr+dy*facty*factr+overflow_v;
    
    dz=(temp+20)%10;
    overflow_v=(temp+20)/10-2;


    /* printf("%d,%d,%d,%d,%d\n",dx,dy,temp,dz,overflow_v); */
    result=append_head(result,dz);

    if (cx==x && cy==y) {
      if (overflow_v!=0) result=append_head(result,overflow_v);
      break;
    }
  }
  return clean_number(result);
}


struct number *create_zero(void) {
  struct number *zero=init_number();
  zero=append_head(zero,0);
  return zero;
}
struct number *do_scale (struct number* num, int x) {
  struct number *result;
  struct number *zero=create_zero();
  if (x==0) {
    return zero;
  }
  if (x==1) {
    result=do_add(num,zero);
    destroy_number(zero);
    return result;
  }
  
  return do_add(num, do_scale(num, x-1));
}



void write_down(struct number *num) {
  struct number *h, *c;
  h=c=num;

  if (get_sign(num)!=1) printf("-");
  
  for (c=h->next; c!=h;c=c->next) {
    printf("%d",c->digital);
  }
  printf("\n");
}


struct number *do_mul (struct number* x, struct number * y) {
  struct number *c_x,*c_y;
  c_x=do_scale(x,1);
  c_y=do_scale(y,1);

  if (compare_length(x,y) == DIGITAL_LEN_GT) return do_mul(y,x);

  struct number *px, *res, *tmp;
  res=create_zero();
  int dx;
  for (px=x->next;px!=x;px=px->next) {
    append_tail(res,0);
    dx=px->digital;
    tmp=do_add(res,do_scale(y,dx));
    destroy_number(res);
    res=tmp;
  }
  set_sign(res,get_sign(x)*get_sign(y));
  return res;
}

int main() {
  /* struct number *x,*y; */
  /* x=init_number(); */
  /* set_sign(x,1); */
  /* append_head(x,1); */
  /* append_head(x,2); */
  /* append_head(x,3); */
  /* append_head(x,4); */
  /* append_head(x,5); */
  /* append_head(x,6); */
  /* y=init_number(); */

  /* set_sign(y,-1); */
  /* append_head(y,1); */
  /* append_head(y,2); */

  /* append_head(y,3); */
  /* append_head(y,4); */
  /* append_head(y,5); */
  /* append_head(y,6); */

  /* write_down(x); */
  /* write_down(y); */
  /* write_down(do_mul(x,y)); */
  

  struct number *one=init_number();
  append_head(one,1);
  struct number *c=do_scale(one,1);
  struct number *fab=do_scale(one,1);

  while (1) {
    c=do_add(one,c);
    fab=do_mul(fab,c);
    printf("current=");
    write_down(c);
    printf("fab=");
    write_down(fab);
  }
}
